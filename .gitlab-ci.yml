# declare stages
stages:
  - node-build
  - test
  - docker-build-and-push
  - deploy

# get dependencies and build front-end
node-build:
 image: node:10.23.1-alpine
 stage: node-build
 script:
   - npm run get-dependencies --prefix app
   - npm run client:build --prefix app
 cache:
   key: node-cache
   paths:
     - app/node_modules/
     - app/client/node_modules/
 # save front build for next stages
 artifacts:
   paths:
     - app/build/
   expire_in: 5 min

# run tests
test:
  image: node:10.23.1-alpine
  stage: test
  cache:
    key: node-cache
    paths:
      - app/node_modules/
      - app/client/node_modules/
  script:
    - npm run test --prefix app/client

# build new docker image from Dockerfile and push it to DockerHub
docker-build-and-push:
 image: docker:latest
 stage: docker-build-and-push
 cache:
   key: node-cache
   paths:
     - app/node_modules/
 services:
   - docker:dind
 script:
   # drop image unused dir
   - rm -rf app/client/
   # login to DockerHub
   - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
   # build docker image and set pipeline_id as its tag
   - docker build . --tag $DOCKER_USER/app:$CI_PIPELINE_IID
   # push image to DockerHub
   - docker push $DOCKER_USER/app:$CI_PIPELINE_IID

# deploy to server
deploy:
  stage: deploy
  image: ubuntu

  before_script:
    # install ssh-agent if it hasn't installed
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

    # run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null

    # create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  # execute commands on the remote server from GitLba runner
  script:
    # set current image tag to vars.env
    - ssh -o StrictHostKeyChecking=no root@$HOST "echo IMAGE=$DOCKER_USER/app:$CI_PIPELINE_IID > /home/app/vars.env"
    # kill odl container and run newer
    - ssh -o StrictHostKeyChecking=no root@$HOST "cd /home/app &&docker-compose --log-level ERROR down &&docker-compose --env vars.env --log-level ERROR up -d "